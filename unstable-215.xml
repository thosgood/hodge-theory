<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"><fr:frontmatter><fr:anchor>2347</fr:anchor><fr:taxon>Proof</fr:taxon><fr:addr>#215</fr:addr><fr:route>unstable-215.xml</fr:route><fr:parent>hodge-theory-ii-1.2.9</fr:parent></fr:frontmatter><fr:mainmatter>
    <fr:p>
      To prove surjectivity, we write
      <fr:tex
display="block">         \begin {aligned}           ((B+B')\cap (C+C'))+D           &amp;= (((B+B')\cap (C+C'))+B')+C'         \\&amp;= ((B+B')\cap (C+C'+B'))+C'         \\&amp;= (B+B'+C')\cap (C+C'+B')         \\&amp;= (B+D)\cap (C+D).         \end {aligned}       </fr:tex></fr:p>

    <fr:p>
      To prove injectivity, we write
      <fr:tex
display="block">         (B+B')\cap (C+C')\cap  D         = ((B+B')\cap  D)\cap ((C+C')\cap  D).       </fr:tex>
      Since <fr:tex>B'\subset  D</fr:tex>, we have
      <fr:tex
display="block">         \begin {aligned}           (B+B')\cap  D           &amp;= (B\cap  D)+B'         \\&amp;= B'         \end {aligned}       </fr:tex>
      and similarly
      <fr:tex
display="block">         (C+C')\cap  D         = C'       </fr:tex>
      and
      <fr:tex
display="block">         \begin {aligned}           (B+B')\cap (C+C')\cap  D           &amp;= B'\cap  C'         \\&amp;= E.         \end {aligned}       </fr:tex></fr:p>
  </fr:mainmatter><fr:backmatter><fr:contributions></fr:contributions><fr:context><fr:tree
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"><fr:frontmatter><fr:anchor>2346</fr:anchor><fr:taxon>Lemma</fr:taxon><fr:addr>hodge-theory-ii-1.2.9</fr:addr><fr:route>hodge-theory-ii-1.2.9.xml</fr:route><fr:number>1.2.9</fr:number><fr:parent>hodge-theory-ii-1.2</fr:parent></fr:frontmatter><fr:mainmatter><fr:p>
    Let <fr:tex>B</fr:tex>, <fr:tex>C</fr:tex>, <fr:tex>B'</fr:tex>, <fr:tex>C'</fr:tex>, <fr:tex>D</fr:tex>, and <fr:tex>E</fr:tex> be sub-objects of <fr:tex>A</fr:tex>.
    Suppose that
    <fr:tex
display="block">       \begin {gathered}         B'+C' = D         \qquad  B'\cap  C' = E       \\B\cap  D \subset  B'         \qquad  C\cap  D \subset  C'.       \end {gathered}     </fr:tex>
    Then
    <fr:tex
display="block">       ((B+B')\cap (C+C'))/E       \xrightarrow {\sim } ((B+D)\cap (C+D))/D.     </fr:tex></fr:p>
  
    
    <fr:tree
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"><fr:frontmatter><fr:anchor>680</fr:anchor><fr:taxon>Proof</fr:taxon><fr:addr>#215</fr:addr><fr:route>unstable-215.xml</fr:route><fr:parent>hodge-theory-ii-1.2.9</fr:parent></fr:frontmatter><fr:mainmatter>
    <fr:p>
      To prove surjectivity, we write
      <fr:tex
display="block">         \begin {aligned}           ((B+B')\cap (C+C'))+D           &amp;= (((B+B')\cap (C+C'))+B')+C'         \\&amp;= ((B+B')\cap (C+C'+B'))+C'         \\&amp;= (B+B'+C')\cap (C+C'+B')         \\&amp;= (B+D)\cap (C+D).         \end {aligned}       </fr:tex></fr:p>

    <fr:p>
      To prove injectivity, we write
      <fr:tex
display="block">         (B+B')\cap (C+C')\cap  D         = ((B+B')\cap  D)\cap ((C+C')\cap  D).       </fr:tex>
      Since <fr:tex>B'\subset  D</fr:tex>, we have
      <fr:tex
display="block">         \begin {aligned}           (B+B')\cap  D           &amp;= (B\cap  D)+B'         \\&amp;= B'         \end {aligned}       </fr:tex>
      and similarly
      <fr:tex
display="block">         (C+C')\cap  D         = C'       </fr:tex>
      and
      <fr:tex
display="block">         \begin {aligned}           (B+B')\cap (C+C')\cap  D           &amp;= B'\cap  C'         \\&amp;= E.         \end {aligned}       </fr:tex></fr:p>
  </fr:mainmatter></fr:tree>
  
</fr:mainmatter></fr:tree></fr:context><fr:related></fr:related><fr:backlinks></fr:backlinks><fr:references></fr:references></fr:backmatter></fr:tree>